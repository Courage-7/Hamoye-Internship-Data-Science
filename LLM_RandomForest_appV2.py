{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyODHU8iW6/k+DnbdvTdQN01",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Courage-7/Hamoye-Internship-Data-Science/blob/main/LLM_RandomForest_appV2.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6VB0vc5s0Xzx"
      },
      "outputs": [],
      "source": [
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "import google.generativeai as genai\n",
        "\n",
        "# Load data\n",
        "@st.cache_data\n",
        "def load_data(uploaded_file):\n",
        "    df = pd.read_csv(uploaded_file)\n",
        "    return df\n",
        "\n",
        "# Preprocess the data\n",
        "def preprocess_data(df):\n",
        "    region_encoder = LabelEncoder()\n",
        "    event_encoder = LabelEncoder()\n",
        "    df['region_encoded'] = region_encoder.fit_transform(df['Region'])\n",
        "    df['event_encoded'] = event_encoder.fit_transform(df['event_type'])\n",
        "    df['log_fatalities'] = np.log1p(df['fatalities'])\n",
        "    df['region_event_interaction'] = df['region_encoded'] * df['event_encoded']\n",
        "    X = df[['fatalities', 'log_fatalities', 'event_encoded', 'region_event_interaction']]\n",
        "    y = df['region_encoded']\n",
        "    return df, X, y, region_encoder, event_encoder\n",
        "\n",
        "# Train Random Forest model\n",
        "def train_rf_model(X, y):\n",
        "    try:\n",
        "        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "        scaler = StandardScaler()\n",
        "        X_train_scaled = scaler.fit_transform(X_train)\n",
        "        X_test_scaled = scaler.transform(X_test)\n",
        "        rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "        rf_model.fit(X_train_scaled, y_train)\n",
        "        predictions = rf_model.predict(X_test_scaled)\n",
        "        return rf_model, X_test_scaled, y_test, predictions\n",
        "    except Exception as e:\n",
        "        st.error(f\"Error during model training: {e}\")\n",
        "        return None, None, None, None\n",
        "\n",
        "# Plot feature importance using Streamlit's native chart\n",
        "def plot_feature_importance(rf_model, X):\n",
        "    feature_importance = pd.DataFrame({'feature': X.columns, 'importance': rf_model.feature_importances_}).sort_values('importance', ascending=False)\n",
        "    st.bar_chart(feature_importance.set_index('feature')['importance'])\n",
        "    st.write(feature_importance)\n",
        "\n",
        "# Generate conflict mitigation strategy\n",
        "def conflict_mitigation_prompt(conflict_type, region):\n",
        "    return f\"\"\"\n",
        "    Generate a detailed and actionable mitigation strategy for addressing {conflict_type} in the {region}. The strategy should include the following components:\n",
        "\n",
        "    1. Immediate Response Actions:\n",
        "       - Specific emergency measures to be taken to ensure immediate safety and stabilization.\n",
        "       - Roles and responsibilities of key responders (e.g., security forces, medical personnel, humanitarian organizations).\n",
        "\n",
        "    2. Medium-Term Interventions:\n",
        "       - Programs and initiatives to address underlying issues and reduce the recurrence of conflict.\n",
        "       - Steps to rebuild trust and promote reconciliation among affected communities.\n",
        "\n",
        "    3. Long-Term Prevention Measures:\n",
        "       - Structural changes and policies to prevent future conflicts.\n",
        "       - Education and awareness campaigns to foster a culture of peace and non-violence.\n",
        "\n",
        "    4. Key Stakeholders to Involve:\n",
        "       - Identification of essential stakeholders (e.g., government agencies, NGOs, community leaders, international organizations).\n",
        "       - Their roles and contributions to the mitigation efforts.\n",
        "\n",
        "    5. Potential Challenges in Implementation:\n",
        "       - Anticipated obstacles and resistance.\n",
        "       - Strategies to overcome these challenges and ensure the effectiveness of the mitigation plan.\n",
        "\n",
        "    Note: Ensure the strategies are well-structured, clearly numbered, and provide practical, actionable steps. Avoid using bold or special characters.\n",
        "    \"\"\"\n",
        "\n",
        "def generate_conflict_mitigation_strategy(api_key, conflict_type, region):\n",
        "    genai.configure(api_key=api_key)\n",
        "    model = genai.model('gemini-1.5-flash')\n",
        "    prompt_text = conflict_mitigation_prompt(conflict_type, region)\n",
        "    response = model.generate(\n",
        "        prompt_text,\n",
        "        max_tokens=800,\n",
        "        temperature=0.3,\n",
        "        top_p=1\n",
        "    )\n",
        "    return response['choices'][0]['text']\n",
        "\n",
        "# Streamlit app layout\n",
        "st.title('Conflict Data Analysis and Mitigation Strategies')\n",
        "st.write(\"This app analyzes conflict data using a Random Forest model and generates conflict mitigation strategies using a Generative AI model.\")\n",
        "\n",
        "# API Key input\n",
        "api_key = st.text_input(\"Enter your API key for Generative AI:\", type=\"password\")\n",
        "\n",
        "# File upload\n",
        "uploaded_file = st.file_uploader(\"Upload your conflict data CSV file\", type=\"csv\")\n",
        "\n",
        "if uploaded_file is not None:\n",
        "    # Load data\n",
        "    df = load_data(uploaded_file)\n",
        "\n",
        "    # Preprocess data\n",
        "    processed_df, X, y, region_encoder, event_encoder = preprocess_data(df)\n",
        "\n",
        "    # Train Random Forest model\n",
        "    rf_model, X_test_scaled, y_test, predictions = train_rf_model(X, y)\n",
        "\n",
        "    if rf_model:\n",
        "        # Evaluate model\n",
        "        class_labels = [\n",
        "            \"Africa\",\n",
        "            \"Asia\",\n",
        "            \"Middle East\",\n",
        "            \"Latin America\",\n",
        "            \"Europe\",\n",
        "            \"USA/Canada\"\n",
        "        ]\n",
        "        st.subheader('Model Evaluation')\n",
        "        st.text(classification_report(y_test, predictions, target_names=class_labels))\n",
        "\n",
        "        # Plot feature importance\n",
        "        st.subheader('Feature Importance')\n",
        "        plot_feature_importance(rf_model, X)\n",
        "\n",
        "        # Generate conflict mitigation strategy\n",
        "        st.subheader('Conflict Mitigation Strategy')\n",
        "        selected_region = st.selectbox('Select Region:', class_labels)\n",
        "        generate_button = st.button('Generate Mitigation Strategy')\n",
        "        if generate_button:\n",
        "            if api_key:\n",
        "                predicted_conflict_type = event_encoder.inverse_transform([np.argmax(np.bincount(y_test[predictions == region_encoder.transform([selected_region])[0]]))])[0]\n",
        "                strategy = generate_conflict_mitigation_strategy(api_key, predicted_conflict_type, selected_region)\n",
        "                st.text_area('Generated Strategy:', value=strategy, height=300)\n",
        "            else:\n",
        "                st.error(\"Please enter your API key.\")\n",
        "\n",
        "        # Display processed data\n",
        "        st.subheader('Processed Data')\n",
        "        st.write(processed_df)\n",
        "\n",
        "        # Download link for the processed data\n",
        "        @st.cache_data\n",
        "        def convert_df(df):\n",
        "            return df.to_csv(index=False).encode('utf-8')\n",
        "\n",
        "        csv = convert_df(processed_df)\n",
        "\n",
        "        st.download_button(\n",
        "            label=\"Download Processed Data as CSV\",\n",
        "            data=csv,\n",
        "            file_name='processed_data.csv',\n",
        "            mime='text/csv',\n",
        "        )\n",
        "    else:\n",
        "        st.error(\"Model training failed. Please check the data and try again.\")\n",
        "else:\n",
        "    st.warning(\"Please upload a CSV file.\")\n"
      ]
    }
  ]
}